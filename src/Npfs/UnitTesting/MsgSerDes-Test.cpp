/*
 * MsgSerDes-Test.cpp
 *
 *  Created on: 19.07.2012
 *      Author: jlode
 */

#include "tut/tut.h"

#include "../MsgBufferSerDes.h"

#include "../NpStr.h"

#include "HeapMemory.h"

namespace tut
{
struct MsgSerDesTest: public Npfs::MsgBufferSerDes
{
  static const unsigned char testPattern[8];
  static const unsigned char rxTestData[256];

  unsigned char rxBuffer[256], txBuffer[256];

  MsgSerDesTest(): MsgBufferSerDes(rxBuffer, txBuffer, sizeof(rxBuffer))
  {
    memcpy(rxBuffer, rxTestData, sizeof(rxBuffer));
    mm = new HeapMemory;
  }

  ~MsgSerDesTest()
  {
    delete mm;
  }
};

const unsigned char MsgSerDesTest::rxTestData[256] =
{
    0x18, 0x11, 0x7c, 0xd1, 0x97, 0x95, 0x84, 0x5c, 0x85, 0x0a, 0x9f, 0xfd, 0x55, 0xff, 0xf5, 0x5a,
    0xd8, 0xa0, 0xed, 0x76, 0xcf, 0xf2, 0x29, 0x58, 0x8f, 0xbd, 0x43, 0xab, 0x68, 0x7d, 0x53, 0x5b,
    0x83, 0x64, 0xe7, 0x96, 0x77, 0xb8, 0x93, 0xda, 0x10, 0x93, 0xd8, 0xaf, 0x2a, 0x19, 0x95, 0x75,
    0xe0, 0xd5, 0x35, 0x6d, 0x4d, 0xfc, 0x4d, 0x33, 0xde, 0x3b, 0xa1, 0x64, 0x5f, 0x25, 0xc7, 0x74,
    0xea, 0xa0, 0x47, 0x7b, 0x02, 0x63, 0xae, 0xfb, 0xc1, 0xfb, 0x1f, 0x14, 0x74, 0xb6, 0x87, 0x04,
    0x0f, 0x42, 0x72, 0x12, 0x15, 0x02, 0x9b, 0xc7, 0x2a, 0x29, 0xb7, 0xe5, 0x0e, 0x18, 0xae, 0xf6,
    0x38, 0x34, 0x11, 0x56, 0x34, 0xde, 0x50, 0xc4, 0x90, 0x1a, 0x91, 0x23, 0xd0, 0x54, 0xd9, 0x69,
    0x83, 0x38, 0x77, 0xda, 0x6c, 0x88, 0xfd, 0xe5, 0x62, 0x5e, 0xa7, 0x11, 0x13, 0x81, 0x99, 0xdd,
    0x93, 0x70, 0x27, 0x9e, 0x55, 0xdc, 0xd0, 0xf6, 0xbd, 0x44, 0x85, 0x8f, 0x8b, 0x2f, 0x60, 0xdc,
    0x3b, 0xf1, 0xcb, 0x69, 0x79, 0xd7, 0x8c, 0xf3, 0xc0, 0x31, 0xd8, 0xa7, 0x30, 0x5a, 0x5a, 0x0a,
    0x57, 0xbf, 0x98, 0x15, 0x58, 0xea, 0xe2, 0x71, 0x1a, 0xb5, 0xeb, 0xd2, 0xfc, 0xf5, 0x74, 0x81,
    0xd9, 0x3b, 0xa6, 0x93, 0xc2, 0x63, 0x63, 0xc6, 0x48, 0xc8, 0x78, 0x71, 0x37, 0x31, 0x06, 0x9e,
    0x8c, 0x0f, 0xa2, 0xf7, 0xe5, 0xbb, 0x26, 0xbc, 0xfa, 0xff, 0x11, 0xaa, 0x92, 0x28, 0xcb, 0xb4,
    0x8a, 0x99, 0x37, 0x70, 0x40, 0x19, 0x5e, 0x47, 0x81, 0x2d, 0xcf, 0xcb, 0x70, 0x9e, 0x59, 0xfe,
    0x8c, 0x8b, 0xc0, 0xba, 0x55, 0xfe, 0xd5, 0x85, 0x43, 0xfb, 0xe9, 0xd0, 0xd9, 0x9b, 0x0b, 0xaf,
    0x74, 0x3b, 0x65, 0x99, 0x31, 0x36, 0x01, 0xd0, 0x3b, 0x16, 0x73, 0x4d, 0x71, 0xd6, 0x2d, 0x5c,

};

const unsigned char MsgSerDesTest::testPattern[8] = { 0x26, 0x95, 0xd0, 0x05, 0xaa, 0x5b, 0xb8, 0x61 };

namespace
{
typedef test_group<MsgSerDesTest> TestGroup;
TestGroup serDesTest_group("1 MsgSerDes");
typedef TestGroup::object testobject;
}

template<> template<>
void testobject::test<1>()
{
  set_test_name("construction");

  ensure("rbyteCount zero check", rbyteCount == 0);
  ensure("rbyteCount read check", consumedByteCount() == 0);
}

template<> template<>
void testobject::test<2>()
{
  set_test_name("64 bit numbers");

  putUI64(0x61b85baa05d09526ULL);
  ensure("TX data check", memcmp(txBuffer, testPattern, 8) == 0);
  uint64_t result = getUI64();
  ensure("RX data check", 0x5c849597d17c1118ull == result);
}

template<> template<>
void testobject::test<3>()
{
  set_test_name("32 bit numbers");

  putUI32(0x05d09526ul);
  ensure("TX data check", memcmp(txBuffer, testPattern, 4) == 0);
  uint32_t result = getUI32();
  ensure("RX data check", 0xd17c1118 == result);
}

template<> template<>
void testobject::test<4>()
{
  set_test_name("16 bit numbers");

  putUI16(0x9526);
  ensure("TX data check", memcmp(txBuffer, testPattern, 2) == 0);
  uint16_t result = getUI64();
  ensure("RX data check", 0x1118 == result);
}

template<> template<>
void testobject::test<5>()
{
  set_test_name("8 bit numbers");

  putUI8(0x26);
  ensure("TX data check", memcmp(txBuffer, testPattern, 1) == 0);
  uint8_t result = getUI64();
  ensure("RX data check", 0x18 == result);
}

template<> template<>
void testobject::test<6>()
{
  set_test_name("binary buffer transfer");

  unsigned char* rxTestBuffer = 0;

  put(testPattern, 8);
  ensure("TX data check", memcmp(txBuffer, testPattern, 1) == 0);
  get(rxTestBuffer, 32);
  ensure("RX data check", memcmp(rxBuffer, rxTestBuffer, 32) == 0);

  release(rxTestBuffer);
}

template<> template<>
void testobject::test<7>()
{
  set_test_name("String transfer");

  Npfs::NpStr rxTestString;
  Npfs::NpStr txTestString;

  txTestString.str = "The quick brown fox jumps over the lazy dogs back 0123456789 times!";
  txTestString.len = strlen(txTestString.str);

  put(txTestString);
  ensure("TX data check", (txBuffer[0] == (txTestString.len & 0xff)) && (txBuffer[1] == ((txTestString.len >> 8) & 0xff)) && (memcmp(txBuffer + 2, txTestString.str, txTestString.len) == 0));
  memcpy(rxBuffer, txBuffer, txTestString.len + 2);
  get(rxTestString);
  ensure("RX data check", (rxBuffer[0] == (rxTestString.len & 0xff)) && (rxBuffer[1] == ((rxTestString.len >> 8) & 0xff)) && (memcmp(rxBuffer + 2, rxTestString.str, rxTestString.len) == 0));
  ensure("consumed bytes", (consumedByteCount() - 2) == rxTestString.len);

  release(rxTestString);
}

template<> template<>
void testobject::test<8>()
{
  set_test_name("Qid transfer");

  Npfs::NpQid qid;

  get(qid);
  ensure_equals("RX data check: type", qid.type, 0x18);
  ensure_equals("RX data check: version", qid.version, 0x97d17c11);
  ensure_equals("RX data check: path", qid.path, 0x55fd9f0a855c8495ull);
  put(qid);
  ensure("cross transfer data check", (memcmp(rxBuffer, txBuffer, 13) == 0));

}

}
